import datetime
from aiogram import Bot, Dispatcher, executor, types
from binance import Client, ThreadedWebsocketManager, ThreadedDepthCacheManager
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import Throttled
import pandas as pd
from config import *
from database.db import *
import os

path_coins = 'allcoins/'


def createFile(file_name):
	try:
		f = open(f'{path_coins}{file_name}', 'r', encoding='utf-8')
		f.close()
	except FileNotFoundError:
		f = open(f'{path_coins}{file_name}', 'w', encoding='utf-8')
		f.close()
		getAllCoins(file_name)


def getAllCoins(file_name):
	f = open(f'{path_coins}{file_name}', 'w', encoding='utf-8')

	client = Client(binance_token, binance_secret)
	tickers = client.get_all_tickers()
	ticker_df = pd.DataFrame(tickers)
	ticker_df.set_index('symbol', inplace=True)

	for i in binance_coins:
		num = float(ticker_df.loc[i]['price'])
		f.write(f'{num}\n')

	# coingeko
	#for i in range(len(coins.keys())):
	#	f.write(f'{getnewPrices(list(coins.values())[i])}\n')
	f.close()


def check_procent_stat(proc, vector):
	proc = float(proc)

	if proc <= 3:
		if vector == 'up':
			return 'üìà'
		else:
			return 'üìâ'
	if 3 < proc <= 6:
		if vector == 'up':
			return 'üìàüìà'
		else:
			return 'üìâüìâ'
	if proc > 6:
		if vector == 'up':
			return 'üìàüìàüìà'
		else:
			return 'üìâüìâüìâ'


def defStarting(uprocent, file_name):
	uprocent = float(uprocent)
	client = Client(binance_token, binance_secret)
	tickers = client.get_all_tickers()
	ticker_df = pd.DataFrame(tickers)
	ticker_df.set_index('symbol', inplace=True)
	new = []
	old = []
	res = []

	with open(f'{path_coins}{file_name}', 'r', encoding='utf-8') as file:
		old = [float(line.rstrip()) for line in file]

	for i in binance_coins:
		new.append(float(ticker_df.loc[i]['price']))

	for i in range(len(binance_coins)):
		if abs(round(old[i] - new[i], 6)) >= round(old[i]*(uprocent/100), 6) and float(abs(round(old[i] - new[i], 6))) != 0:
			tmp = ''
			tmp2 = ''
			print(f'Not empty - {str(datetime.datetime.now())[:-10]}')

			if round(old[i] - new[i], 6) > 0:
				tmp = check_procent_stat(round(((abs(round(old[i] - new[i], 4))*100)/old[i]), 1), 'down')
				tmp2 = '-'
			else:
				tmp = check_procent_stat(round(((abs(round(old[i] - new[i], 4))*100)/old[i]), 1), 'up')
				tmp2 = '+'

			res.append(f'{tmp}<a href="https://www.binance.com/en/trade/{binance_coins[i][:-4]}_BUSD">{binance_coins[i][:-4]}</a> {tmp2}{round(((abs(round(old[i] - new[i], 4))*100)/old[i]), 2)}% / <b>Price:</b> {new[i]}\n')

	with open(f'{path_coins}{file_name}', 'w', encoding='utf-8') as file:
		for i in range(len(new)):
			file.write(f'{new[i]}\n')

	return res


def itsAdmin(adm):
	adm = int(adm)
	if adm: return '–î–∞'
	else: return '–ù–µ—Ç'


def getAllOptions(uid):
	uid = int(uid)
	uprocent, uinterval = getUserStat(uid)[6], getUserStat(uid)[7]
	return [uinterval, uprocent]


def getHours(uid):
	return float(getAllOptions(int(uid))[0])


def getProcent(uid):
	return float(getAllOptions(int(uid))[1])


def getCode():
	code = ''
	with open('modules/code.txt', 'r') as f:
		code = f.readline()
	return code


def changeCode(code):
	with open('modules/code.txt', 'w') as f:
		f.write(code)


class createCase(StatesGroup):
	name = State()
	coin = State()
	price = State()
	volume = State()


class updateCase(StatesGroup):
	name = State()
	coin = State()
	price = State()
	volume = State()


class deleteCase(StatesGroup):
	name = State()


class createScam(StatesGroup):
	check = State()


async def getVol(message, bot, dp):
	try:
		await dp.throttle(message.text, rate=3)
	except Throttled:
		msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = "<b>Wait 3 seconds. You can't use this command often.</b>"

		await message.reply(msg)
		await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
	else:
		client = Client(binance_token, binance_secret)
		tickers = client.get_ticker()
		ticker_df = pd.DataFrame(tickers)
		ticker_df.set_index('symbol', inplace=True)

		vols = {}
		msg = f'<b>–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b> <i>{len(binance_coins)}</i>\n<b>–ë–∏—Ä–∂–∞:</b> <i>binance</i>\n\n'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = f'<b>Total coins to check:</b> <i>{len(binance_coins)}</i>\n<b>Stock Market:</b> <i>binance</i>\n\n'

		for coin in binance_coins:
			open_price = round(float(ticker_df.loc[coin]['openPrice']), 3)
			close_price = round(float(ticker_df.loc[coin]['lastPrice']), 3)

			if close_price != 0:
				# vol = (open_price/close_price - 1) * 100
				vol = ((open_price - close_price)/close_price) * 100
			else:
				vol = 0.1

			vols[coin] = round(vol, 2)

		vols = sorted(vols.items() , key=lambda t : t[1])
		vols_max = list(reversed(vols))
		vols_min = []

		if getUserStat(message.from_user.id)[5] == 'en':
			msg += f'<b>Top most volatile coins:</b>\n'
		else:
			msg += f'<b>–¢–æ–ø —Å–∞–º—ã—Ö –≤–æ–ª–∞—Ç–∏–ª—å–Ω—ã—Ö –º–æ–Ω–µ—Ç:</b>\n'

		temp, temp2 = [], []

		for i in range(25):
			coin_price = round(float(ticker_df.loc[vols_max[i][0]]["quoteVolume"]))

			if float(vols_max[i][1]) > 1:
				if coin_price >= 1000000:
					coin_price = f'{round(coin_price/1000000, 2)}M'
					temp2.append(coin_price)
				else:
					coin_price = f'{round(coin_price/1000)}K'
					temp2.append(coin_price)

				temp.append(f'<code>{vols_max[i][0][:-4]}: {vols_max[i][1]}%</code>')
				# msg += f'<a href="https://www.binance.com/en/trade/{vols_max[i][0][:-4]}_BUSD">{vols_max[i][0][:-4]}</a>  <code>{vols_max[i][1]}% 24h vol ${coin_price}</code>\n'

		for i in range(len(temp)):
			if float(temp2[i][:-1]) > 0:
				msg += f'<code>{spaces(temp, temp[i])}   vol: {temp2[i]}</code>\n'

		if getUserStat(message.from_user.id)[5] == 'en':
			msg += f'\n\n<i>All information is taken for the 24 hour range!\nDate: {str(datetime.datetime.now())[:-10]}</i>'
		else:
			msg += f'\n\n<i>–í—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±–µ—Ä–µ—Ç—Å—è –∑–∞ 24-—á–∞—Å–æ–≤–æ–π –¥–∏–∞–ø–∞–∑–æ–Ω!\n–î–∞—Ç–∞: {str(datetime.datetime.now())[:-10]}</i>'

		updateUnick(message.from_user.id, message.from_user.username)
		await bot.send_message(message.from_user.id, msg, reply_markup=getKeyboard(message, 'tools'))


async def getProfile(message, bot):
	key1 = types.InlineKeyboardButton('üá∑üá∫Russian', callback_data='langru')
	key2 = types.InlineKeyboardButton('üá¨üáßEnglish', callback_data='langen')
	keyboard = types.InlineKeyboardMarkup().add(key1, key2)

	msg = f'<b>‚öôÔ∏è–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n<b>üí≥–ü–æ–¥–ø–∏—Å–∫–∞:</b> {None}\n<b>üìù–Ø–∑—ã–∫:</b> {getUserStat(message.from_user.id)[5]}\n\n<b>üóì–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {getUserStat(message.from_user.id)[2]}\n\n<i>Id: {message.from_user.id}</i>'
	if getUserStat(message.from_user.id)[5] == 'en':
		msg = f'<b>‚öôÔ∏èYour profile:</b>\n\n<b>üí≥Subscription:</b> {None}\n<b>üìùLanguage:</b> {getUserStat(message.from_user.id)[5]}\n\n<b>üóìDate of registration:</b> {getUserStat(message.from_user.id)[2]}\n\n<i>Id: {message.from_user.id}</i>'

	await bot.send_message(message.from_user.id, msg, reply_markup=keyboard)


def getKeyboard(message, arg):
	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)

	if arg == 'main':
		if getUserStat(message.from_user.id)[5] == 'en':
			keyboard.row('Profile', 'FAQ')
			keyboard.row('Tools')
		else:
			keyboard.row('–ü—Ä–æ—Ñ–∏–ª—å', 'FAQ')
			keyboard.row('–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')
	if arg == 'tools':
		if getUserStat(message.from_user.id)[5] == 'en':
			keyboard.row('Scam', 'Coins', 'Volatility')
			keyboard.row('Algorithm', 'Portfolio', 'Menu')
		else:
			keyboard.row('–°–∫–∞–º', '–ö–æ–π–Ω—ã', '–í–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å')
			keyboard.row('–ê–ª–≥–æ—Ä–∏—Ç–º', '–ü–æ—Ä—Ç—Ñ–µ–ª—å', '–ú–µ–Ω—é')
	if arg == 'logic':
		if getUserStat(message.from_user.id)[5] == 'en':
			keyboard.row('On', 'Off')
			keyboard.row('Options', 'Tools')
		else:
			keyboard.row('–í–∫–ª', '–í—ã–∫–ª')
			keyboard.row('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã')

	return keyboard


def spaces(lst, string):
	string = str(string)
	tmp = []
	for i in range(len(lst)):
		tmp.append(len(str(lst[i])))
	n = max(tmp)
	f = len(string)
	while len(string) < n:
		string += ' '

	return string


async def getCoins(message, bot, value):
	msg = ''

	if value == 'binance':
		client = Client(binance_token, binance_secret)
		tickers = client.get_all_tickers()
		ticker_df = pd.DataFrame(tickers)
		ticker_df.set_index('symbol', inplace=True)

		temp, temp2 = [], []
		msg = f'<b>–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç:</b> <i>{len(cmd_coins)}</i>\n<b>–ë–∏—Ä–∂–∞:</b> <i>{value}</i>\n\n'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = f'<b>Total coins:</b> <i>{len(cmd_coins)}</i>\n<b>Stock Market:</b> <i>{value}</i>\n\n'

		for i in range(len(cmd_coins) // 2):
			temp.append(f'<code>{cmd_coins[i][:-4]}: ${round(float(ticker_df.loc[cmd_coins[i]]["price"]), 3)}</code>')

		for i in range(len(cmd_coins) // 2, len(cmd_coins)):
			temp2.append(f'<code>{cmd_coins[i][:-4]}: ${round(float(ticker_df.loc[cmd_coins[i]]["price"]), 3)}</code>')

		for i in range(len(temp)):
			msg += f'<code>{spaces(temp, temp[i])} {temp2[i]}</code>\n'

		if getUserStat(message.from_user.id)[5] == 'en':
			msg += f'\n\n<i>Date: {str(datetime.datetime.now())[:-10]}</i>'
		else:
			msg += f'\n\n<i>–î–∞—Ç–∞: {str(datetime.datetime.now())[:-10]}</i>'

	if value == 'bybit':
		prices = getPrice(bybit_coins)
		temp, temp2 = [], []
		msg = f'<b>–í—Å–µ–≥–æ –º–æ–Ω–µ—Ç:</b> <i>{len(bybit_coins)}</i>\n<b>–ë–∏—Ä–∂–∞:</b> <i>{value}</i>\n\n'

		for i in range(len(bybit_coins) // 2):
			temp.append(f'<code>{bybit_coins[i][:-4]}: ${prices[i]}</code>')

		for i in range(len(bybit_coins) // 2, len(bybit_coins)):
			temp2.append(f'<code>{bybit_coins[i][:-4]}: ${prices[i]}</code>')

		for i in range(len(temp)):
			msg += f'<code>{spaces(temp, temp[i])} {temp2[i]}</code>\n'

	updateUnick(message.from_user.id, message.from_user.username)
	await bot.send_message(message.from_user.id, msg, reply_markup=getKeyboard(message, 'tools'))


async def getOptions(message, bot):
	msg = ''

	if getUserStat(message.from_user.id)[4]:
		msg = f'<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {getHours(message.from_user.id)}\n–ü—Ä–æ—Ü–µ–Ω—Ç: {getProcent(message.from_user.id)}\n–ö–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: /{getCode()}'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = f'<b>Current options:</b>\n\nInterval: {getHours(message.from_user.id)}\nPercent: {getProcent(message.from_user.id)}\nCode for registration: /{getCode()}'
	else:
		msg = f'<b>–¢–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n\n–ò–Ω—Ç–µ—Ä–≤–∞–ª: {getHours(message.from_user.id)}\n–ü—Ä–æ—Ü–µ–Ω—Ç: {getProcent(message.from_user.id)}'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = f'<b>Current options:</b>\n\nInterval: {getHours(message.from_user.id)}\nPercent: {getProcent(message.from_user.id)}'

	await bot.send_message(message.from_user.id, msg)


def checkPrice(coin):
	client = Client(binance_token, binance_secret)
	tickers = client.get_all_tickers()
	ticker_df = pd.DataFrame(tickers)
	ticker_df.set_index('symbol', inplace=True)

	try:
		return round(float(ticker_df.loc[str(coin)]["price"]), 3)
	except Exception:
		return 'Error'



# def getKeyboard():
# 	keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
# 	keyboard.row('ON‚úÖ', 'OFF‚ùå')
# 	keyboard.row('COINSüí∞', 'OPTIONS‚öôÔ∏è')
#
# 	return keyboard
''' Coingeko
def defStarting():
	new = []
	old = []
	res = []

	with open('coins.txt', 'r', encoding='utf-8') as file:
		old = [line.rstrip() for line in file]
	for i in range(len(coins.keys())):
		new.append(getnewPrices(list(coins.values())[i]))

	for i in range(len(coins.keys())):
		if ',' in str(old[i]):
			old[i] = round(float(str(old[i]).replace(',', '.')), 6)
			new[i] = round(float(str(new[i]).replace(',', '.')), 6)
		else:
			old[i] = round(float(str(old[i]).replace(',', '.')), 6)
			new[i] = round(float(str(new[i]).replace(',', '.')), 6)

		if abs(round(old[i] - new[i], 6)) >= round(old[i]*(getProcent()/100), 6) and float(abs(round(old[i] - new[i], 6))) != 0:
			tmp = ''
			#print(f'\n{list(coins.keys())[i]}: –¶–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞—Å—å –Ω–∞ {getProcent()}%\n {old[i]} - {new[i]} = {(round(old[i] - new[i], 4))}\n')
			print('Not empty')
			if round(old[i] - new[i], 6) > 0: tmp = '—É–ø–∞–ª–∞'
			else: tmp = '–ø–æ–¥–Ω—è–ª–∞—Å—å'

			res.append(f'<b>–¶–µ–Ω–∞ –æ—Ç–∫–ª–æ–Ω–∏–ª–∞—Å—å –Ω–∞ {round(((abs(round(old[i] - new[i], 4))*100)/old[i]), 1)}%</b>\n<b>–û–±—ä–µ–º —Ç–æ—Ä–≥–æ–≤ –∑–∞ 24 —á–∞—Å–∞:</b> ${int(getAdvInfo(list(coins.values())[i]))/1000000} –º–ª–Ω\n\n<b>{getProcent()}% =</b> {round(old[i]*(getProcent()/100), 4)}\n<b>–ö–æ–π–Ω:</b> {list(coins.keys())[i]}\n<b>–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞:</b> {old[i]}\n<b>–ù–æ–≤–∞—è —Ü–µ–Ω–∞:</b> {new[i]}\n<b>–¶–µ–Ω–∞ {tmp} –Ω–∞</b> {abs((round(old[i] - new[i], 4)))}\n')
	#getAllCoins()
	with open('coins.txt', 'w', encoding='utf-8') as file:
		for i in range(len(new)):
			file.write(f'{new[i]}\n')

	return res
'''
