# -*- coding: utf-8 -*-
import logging
import random
import datetime
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.utils.exceptions import Throttled

from config import *
from modules.defs import *
from database.db import *
from modules.bybit import getPrice
from modules.parse import checkCoinScam




async def getScam(message, bot, dp):
	try:
		await dp.throttle(message.text, rate=3)
	except Throttled:
		msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = "<b>Wait 3 seconds. You can't use this command often.</b>"

		await message.reply(msg)
		await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
	else:
		msg = '<b>–í–≤–µ–¥–∏—Ç–µ —Ç–æ–∫–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:</b>'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = f"<b>Enter the token to verify:</b>"

		await bot.send_message(message.from_user.id, msg)
		await createScam.check.set()


async def getCase(message, bot, dp):
	try:
		await dp.throttle(message.text, rate=3)
	except Throttled:
		msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = "<b>Wait 3 seconds. You can't use this command often.</b>"

		await message.reply(msg)
		await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
	else:
		arg = message.text[6:]

		if not(os.path.exists(f'allcases/{message.from_user.id}/')):
			os.mkdir(f'allcases/{message.from_user.id}/')

		if arg == 'create':
			msg = '<b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = "<b>Enter the portfolio id:</b>"

			await bot.send_message(message.from_user.id, msg)
			await createCase.name.set()
		elif arg == 'update':
			msg = '<b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = "<b>Enter the portfolio id:</b>"

			await bot.send_message(message.from_user.id, msg)
			await updateCase.name.set()
		elif arg == 'clear' or arg == 'delete' or arg == 'remove':
			msg = '<b>–í–≤–µ–¥–∏—Ç–µ id –ø–æ—Ä—Ç—Ñ–µ–ª—è:</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = "<b>Enter the portfolio id:</b>"

			await bot.send_message(message.from_user.id, msg)
			await deleteCase.name.set()
		elif arg == 'help':
			msg = '<b>–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n<code>/case create</code> - —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å\n<code>/case update</code> - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–µ –º–æ–Ω–µ—Ç—ã\n<code>/case delete</code> - —É–¥–∞–ª–∏—Ç—å –ø–æ—Ä—Ç—Ñ–µ–ª—å\n\n<i>–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.</i>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>Instruction:</b>\n\n<code>/case create</code> - create a new portfolio\n<code>/case update</code> - add new coins\n<code>/case delete</code> - delete portfolio\n\n<i>Click to copy.</i>'

			await bot.send_message(message.from_user.id, msg)
		else:
			filenames = next(os.walk(f'allcases/{message.from_user.id}/'), (None, None, []))[2]

			if len(filenames):
				if len(filenames) <= 5:
					data, msg = [], '<b>üìï–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å:</b>\n\n'

					if getUserStat(message.from_user.id)[5] == 'en':
						msg = '<b>üìïStatus of your portfolio:</b>\n\n'

					for path in filenames:
						with open(f'allcases/{message.from_user.id}/{path}') as f:
							tmp = [path[:-4], f.readlines()]
							data.append(tmp)

					for info in data:
						values = []
						msg += f'<b>{info[0]}. {info[1][0]}</b>\n'

						for i in info[1]:
							i = i.replace('\n', '')
							values.append(list(i.split(' ')))
						for i in values:
							price = checkPrice(i[0])

							if price != 'Error':
								msg += f'<i>{i[0]}</i>\n<b>üìäPrice:</b> ${price}\n<b>üìâ24h:</b> {None}%\n<b>üí≥Hold:</b> {i[2]} (${round(float(i[2]) * price, 3)})\n<b>‚öñÔ∏èAvgBuy:</b> ${i[1]}\n<b>üìàP&L:</b> ${round(price - float(i[1]), 3)} ({None}%)\n\n'

					msg += '\n<code>/case help</code>'

					await bot.send_message(message.from_user.id, msg)
				else:
					msg = '<b>–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π!</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = '<b>Portfolio limit exceeded!</b>'

					await bot.send_message(message.from_user.id, msg)
			else:
				msg = '<b>–ü–æ—Ä—Ç—Ñ–µ–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω!</b>\n\n<b>–í–≤–µ–¥–∏—Ç–µ:</b> <code>/case create</code>\n\n<i>–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å.</i>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>The portfolio has not been created yet!</b>\n\n<b>Enter:</b> <code>/case create</code>\n\n<i>Click to copy.</i>'

				updateUportid(message.from_user.id, 0)
				await bot.send_message(message.from_user.id, msg)


def bot_start():
	logging.basicConfig(level=logging.INFO)
	storage = MemoryStorage()
	bot = Bot(token=telegram_token, parse_mode=types.ParseMode.HTML, disable_web_page_preview=True)
	dp = Dispatcher(bot, storage=storage)




	#
	# Commands for admins
	#


	@dp.message_handler(commands=['admin', 'panel', '–ø–∞–Ω–µ–ª—å'])
	async def admin_panel_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				msg = ''\
				'<b>–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:</b>\n\n'\
				'/restart_logic_tf <i>- –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ —Ç—Ñ</i>\n'\
				'/start_logic <i>- –∑–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ –∞–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>\n\n'\
				'/users <i>- —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</i>\n'\
				'/admins <i>- —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–¥–º–∏–Ω–æ–≤</i>\n'\
				'/guests <i>- —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞</i>\n\n'\
				'/code –∫–æ–¥ <i>- –ø–æ–º–µ–Ω—è—Ç—å –∫–æ–¥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏</i>\n'\
				'/logs <i>- —Å—Å—ã–ª–∫–∞ –Ω–∞ –ª–æ–≥–∏</i>\n\n\n'\
				'<b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n\n'\
				f'–ö–æ–ª-–≤–æ –∑–∞—Ä–µ–≥. –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <i>{len(getAllStat())}</i>\n\n'\
				f'–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç binance: <i>{len(binance_coins)}</i>\n'\
				f'–ö–æ–ª-–≤–æ –º–æ–Ω–µ—Ç bybit: <i>{len(bybit_coins)}\n\n\n</i>'\
				'<b>–í—Å–µ —Ç—Ñ:</b>\n\n'\
				f'1m - <i>{time_frades_precents[0]}</i>%;\n5m - <i>{time_frades_precents[1]}</i>%;\n15m - <i>{time_frades_precents[2]}</i>%;\n30m - <i>{time_frades_precents[3]}</i>%'

				await bot.send_message(message.from_user.id, msg)
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['start_logic_tf'])
	async def start_logic_tf_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				tfs = time_frades
				minutes = time_frades_minutes
				precents = time_frades_precents

				for i in range(len(tfs)):
					os.system(f'start python logic_times.py {tfs[i]} {minutes[i]} {precents[i]}')
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['restart_logic_tf'])
	async def restart_logic_tf_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				time_frades_pids = getTfPidsStat()

				for i in time_frades_pids:
					os.system(f'start Taskkill /PID {i} /F')
				for i in time_frades:
					updateTfPid(i, 0)

				tfs = time_frades
				minutes = time_frades_minutes
				precents = time_frades_precents

				for i in range(len(tfs)):
					os.system(f'start python logic_times.py {tfs[i]} {minutes[i]} {precents[i]}')
				await bot.send_message(message.from_user.id, '<b>–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∑–∞–ø—É—â–µ–Ω—ã!</b>')
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['stop_logic_tf'])
	async def stop_logic_tf_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				time_frades_pids = getTfPidsStat()

				for i in time_frades_pids:
					os.system(f'start Taskkill /PID {i} /F')
				for i in time_frades:
					updateTfPid(i, 0)
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['start_logic'])
	async def start_logic_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				for j in getAllStat():
					if j[3]:
						os.system(f'start python logic.py {j[0]}')
				await bot.send_message(message.from_user.id, '<b>–ê–ª–≥–æ—Ä–∏—Ç–º—ã –∑–∞–ø—É—â–µ–Ω—ã!</b>')
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['set_admin'])
	async def set_admin_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				uid = message.text[11:]
				setAdmin(uid, 1)

				await bot.send_message(message.from_user.id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ç–µ–ø–µ—Ä—å –∞–¥–º–∏–Ω!</b>')
				await bot.send_message(logs_chat_id, f'<b>–ê–¥–º–∏–Ω {message.from_user.username} –≤—ã–¥–∞–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ (id: {uid})</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['del_admin'])
	async def del_admin_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				uid = message.text[11:]
				if str(uid) != str(owner):
					setAdmin(uid, 0)

					await bot.send_message(message.from_user.id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –±–æ–ª—å—à–µ –Ω–µ –∞–¥–º–∏–Ω!</b>')
					await bot.send_message(logs_chat_id, f'<b>–ê–¥–º–∏–Ω {message.from_user.username} —Å–Ω—è–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ (id: {uid})</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					await bot.send_message(message.from_user.id, access_denied)
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['del_user'])
	async def del_user_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				uid = message.text[10:]
				if str(uid) != str(owner):
					delUser(uid)

					await bot.send_message(message.from_user.id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω!</b>')
					await bot.send_message(logs_chat_id, f'<b>–ê–¥–º–∏–Ω {message.from_user.username} —É–¥–∞–ª–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (id: {uid})</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					await bot.send_message(message.from_user.id, access_denied)
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['code'])
	async def code_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				old_code = getCode()
				new_code = message.text[6:]

				if len(new_code) >= 4:
					changeCode(new_code)

					await bot.send_message(message.from_user.id, f'<b>–ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n<b>–°—Ç–∞—Ä—ã–π –∫–æ–¥:</b> {old_code}\n<b>–ù–æ–≤—ã–π –∫–æ–¥:</b> <code>{new_code}</code>')
					await bot.send_message(logs_chat_id, f'<b>–ê–¥–º–∏–Ω {message.from_user.username} –ø–æ–º–µ–Ω—è–ª –∫–æ–¥ -> <code>{new_code}</code></b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['accounts', 'users', '–∞–∫–∫–∞—É–Ω—Ç—ã'])
	async def accounts_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				tmp = getAllStat()
				users = f'<b>–í—Å–µ–≥–æ {len(tmp)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n'
				for i in tmp:
					users += f'<b>–ù–∏–∫:</b> {i[1]}\n<b>Id:</b> {i[0]}\n<b>–ê–¥–º–∏–Ω:</b> {itsAdmin(i[4])}\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {i[2]}\n\n'

				await bot.send_message(message.from_user.id, users)
			else:
				await bot.send_message(message.from_user.id, access_denied)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['admins', '–∞–¥–º–∏–Ω—ã'])
	async def admins_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				tmp = getAllAdmins()
				users = f'<b>–í—Å–µ–≥–æ {len(tmp)} –∞–¥–º–∏–Ω–æ–≤</b>\n\n'
				for i in tmp:
					users += f'<b>–ù–∏–∫:</b> {i[1]}\n<b>Id:</b> {i[0]}\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {i[2]}\n\n'

				await bot.send_message(message.from_user.id, users)
			else:
				await bot.send_message(message.from_user.id, access_denied)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['guests', '–≥–æ—Å—Ç–∏'])
	async def guests_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				tmp = getAllGuests()
				users = f'<b>–í—Å–µ–≥–æ {len(tmp)} –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n'
				for i in tmp:
					users += f'<b>–ù–∏–∫:</b> {i[1]}\n<b>Id:</b> {i[0]}\n<b>–î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:</b> {i[2]}\n\n'

				await bot.send_message(message.from_user.id, users)
			else:
				await bot.send_message(message.from_user.id, access_denied)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['logs', 'log'])
	async def logs_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if getUserStat(message.from_user.id)[4]:
				await bot.send_message(message.from_user.id, 'https://t.me/+5ufoKN7CYpExMzky')
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –ø–æ–ª—É—á–∏–ª —Å—Å—ã–ª–∫—É –Ω–∞ –ª–æ–≥–∏</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				await bot.send_message(message.from_user.id, access_denied)
		else:
			await bot.send_message(message.from_user.id, access_denied)




	#
	# Commands for users
	#


	@dp.message_handler(commands=['time'])
	async def hour_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			try:
				await dp.throttle(message.text, rate=time_for_spam_ban)
			except Throttled:
				msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

				await message.reply(msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				if int(getUserStat(message.from_user.id)[3]) != 1:
					if (not(message.text[6:].isalpha())) and (message.text[6:] != ''):
						if float(message.text[6:]) > 0.01 and float(message.text[6:]) < 96:
							old_code = getHours(message.from_user.id)
							new_code = message.text[6:]
							updateUinterval(message.from_user.id, new_code)

							msg = f'<b>–ò–Ω—Ç–µ—Ä–≤–∞–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n<b>–°—Ç–∞—Ä—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {old_code}\n<b>–ù–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª:</b> {new_code}'
							if getUserStat(message.from_user.id)[5] == 'en':
								msg = f'<b>The interval has been successfully changed!</b>\n\n<b>Old interval:</b> {old_code}\n<b>New interval:</b> {new_code}'

							await bot.send_message(message.from_user.id, msg)
						else:
							msg = '<b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!</b>'
							if getUserStat(message.from_user.id)[5] == 'en':
								msg = '<b>Invalid value!</b>'

							await bot.send_message(message.from_user.id, msg)
					else:
						msg = '<b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!</b>'
						if getUserStat(message.from_user.id)[5] == 'en':
							msg = '<b>Invalid value!</b>'

						await bot.send_message(message.from_user.id, msg)
				else:
					msg = '<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–∫–ª—é—á–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º!</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = '<b>First, turn off the algorithm!</b>'

					await bot.send_message(message.from_user.id, msg)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['percent'])
	async def procent_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			try:
				await dp.throttle(message.text, rate=time_for_spam_ban)
			except Throttled:
				msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

				await message.reply(msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				if int(getUserStat(message.from_user.id)[3]) != 1:
					if (not(message.text[9:].isalpha())) and (message.text[9:] != ''):
						if float(message.text[9:]) > 0.01 and float(message.text[9:]) < 100:
							old_code = getProcent(message.from_user.id)
							new_code = message.text[9:]
							updateUprocent(message.from_user.id, new_code)

							msg = f'<b>–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n<b>–°—Ç–∞—Ä—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {old_code}\n<b>–ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç:</b> {new_code}'
							if getUserStat(message.from_user.id)[5] == 'en':
								msg = f'<b>The percent has been successfully changed!</b>\n\n<b>Old percent:</b> {old_code}\n<b>New percent:</b> {new_code}'

							await bot.send_message(message.from_user.id, msg)
						else:
							msg = '<b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!</b>'
							if getUserStat(message.from_user.id)[5] == 'en':
								msg = '<b>Invalid value!</b>'

							await bot.send_message(message.from_user.id, msg)
					else:
						msg = '<b>–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ!</b>'
						if getUserStat(message.from_user.id)[5] == 'en':
							msg = '<b>Invalid value!</b>'

						await bot.send_message(message.from_user.id, msg)
				else:
					msg = '<b>–î–ª—è –Ω–∞—á–∞–ª–∞ –≤—ã–∫–ª—é—á–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º!</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = '<b>First, turn off the algorithm!</b>'

					await bot.send_message(message.from_user.id, msg)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['keyboard', '–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞', '–∫–ª–∞–≤–∞'])
	async def keyboard_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			try:
				await dp.throttle(message.text, rate=time_for_spam_ban)
			except Throttled:
				msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

				await message.reply(msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				msg = '<b>–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>The keyboard has been updated!</b>'

				await bot.send_message(message.from_user.id, msg, reply_markup=getKeyboard(message, 'tools'))


	@dp.message_handler(commands=['profile', '–ø—Ä–æ—Ñ–∏–ª—å', 'me'])
	async def profile_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			await getProfile(message, bot)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['logic_on'])
	async def logic_on_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if int(getUserStat(message.from_user.id)[3]) != 1:
				updateUser(message.from_user.id, 1)

				os.system(f'start python logic.py {message.from_user.id}')

				msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø—É—â–µ–Ω!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>Algorithm has been started!</b>'

				await bot.send_message(message.from_user.id, msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∑–∞–ø—É—Å—Ç–∏–ª –∞–ª–≥–æ—Ä–∏—Ç–º</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>The algorithm is already running!</b>'

				await bot.send_message(message.from_user.id, msg)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['logic_off'])
	async def logic_off_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			if int(getUserStat(message.from_user.id)[3]) != 0:
				updateUser(message.from_user.id, 0)
				os.system(f'start Taskkill /PID {int(getUserStat(message.from_user.id)[8])} /F')
				updateUpid(message.from_user.id, 0)

				msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–∫–ª—é—á–µ–Ω!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>Algorithm has been disabled!</b>'

				await bot.send_message(message.from_user.id, msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –æ—Ç–∫–ª—é—á–∏–ª –∞–ª–≥–æ—Ä–∏—Ç–º</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º —É–∂–µ –≤—ã–∫–ª—é—á–µ–Ω!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>The algorithm is already disabled!</b>'

				await bot.send_message(message.from_user.id, msg)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['options', 'settings', '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', '–æ–ø—Ü–∏–∏'])
	async def options_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			try:
				await dp.throttle(message.text, rate=time_for_spam_ban)
			except Throttled:
				msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

				await message.reply(msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				await getOptions(message, bot)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['coins', 'coin', '–∫–æ–π–Ω—ã', '–∫–æ–π–Ω'])
	async def coins_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			try:
				await dp.throttle(message.text, rate=3)
			except Throttled:
				msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ 3 —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f"<b>Wait 3 seconds. You can't use this command often.</b>"

				await message.reply(msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				await getCoins(message, bot, 'binance')
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['scam', '—Å–∫–∞–º', 'antiscam'])
	async def scam_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			await getScam(message, bot, dp)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(state=createScam.check)
	async def input_check(message: types.Message, state: FSMContext):
		msg = ''
		if checkCoinScam(message.text) == 'true':
			msg = '–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ –Ω–µ —Å–∫–∞–º'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = 'Presumably not a scam'
		elif checkCoinScam(message.text) == '–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è!':
			msg = '–û—à–∏–±–∫–∞'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = 'Error'
		else:
			msg = '–ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ —Å–∫–∞–º'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = 'Presumably a scam'

		await bot.send_message(message.from_user.id, f'<b>{msg}!</b>')
		await state.finish()


	@dp.message_handler(commands=['case'])
	async def case_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			await getCase(message, bot, dp)
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(state=createCase.name)
	async def input_name(message: types.Message, state: FSMContext):
		if len(message.text) < 3:
			msg = '<b>–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ!</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>The name should be longer!</b>'

			await message.answer(msg)
			return

		filenames = next(os.walk(f'allcases/{message.from_user.id}/'), (None, None, []))[2]

		async with state.proxy() as data:
			data['name'] = message.text

		await createCase.next()
		msg = '<b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä:</b>'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = '<b>Enter the ticker:</b>'

		await bot.send_message(message.from_user.id, msg)
		await createCase.coin.set()


	@dp.message_handler(state=createCase.coin)
	async def input_coin(message: types.Message, state: FSMContext):
		if len(message.text) < 3:
			msg = '<b>–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ!</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>The name should be longer!</b>'

			await message.answer(msg)
			return

		async with state.proxy() as data:
			data['coin'] = message.text.upper()

		await createCase.next()
		msg = '<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏:</b>'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = '<b>Enter the purchase price:</b>'

		await bot.send_message(message.from_user.id, msg)
		await createCase.price.set()


	@dp.message_handler(state=createCase.price)
	async def input_volume(message: types.Message, state: FSMContext):
		if message.text.isalpha():
			msg = '<b>–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>The price must be a number</b>!'

			await message.answer(msg)
			return
		else:
			async with state.proxy() as data:
				data['price'] = message.text

			await createCase.next()
			msg = '<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ:</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>Enter the quantity:</b>'

			await bot.send_message(message.from_user.id, msg)
			await createCase.volume.set()


	@dp.message_handler(state=createCase.volume)
	async def input_price(message: types.Message, state: FSMContext):
		async with state.proxy() as data:
			if message.text.isalpha():
				msg = '<b>–û–±—ä–µ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>The volume must be a number</b>!'

				await message.answer(msg)
				return
			else:
				async with state.proxy() as data:
					data['volume'] = message.text

				with open(f'allcases/{message.from_user.id}/{getUserStat(message.from_user.id)[13]}.txt', 'w') as f:
					f.write(f'{data["name"]}\n{data["coin"]} {data["price"]} {data["volume"]}')

				msg = f'<b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å (id: {data["name"]}) —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f'<b>Your portfolio (id: {data["name"]}) has been successfully created!</b>'

				await bot.send_message(message.from_user.id, msg)
				updateUportid(message.from_user.id, int(getUserStat(message.from_user.id)[13]) + 1)
				await state.finish()


	@dp.message_handler(state=deleteCase.name)
	async def input_name_open(message: types.Message, state: FSMContext):
		async with state.proxy() as data:
			filenames = next(os.walk(f'allcases/{message.from_user.id}/'), (None, None, []))[2]

			if f'{message.text}.txt' not in filenames:
				msg = '<b>–¢–∞–∫–æ–≥–æ id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>There is no such id!</b>'

				await message.answer(msg)
			else:
				os.remove(f'allcases/{message.from_user.id}/{message.text}.txt')

				msg = f'<b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å (id: {message.text}) —É–¥–∞–ª–µ–Ω!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f'<b>Your portfolio (id: {message.text}) has been deleted!</b>'

				await bot.send_message(message.from_user.id, msg)
			await state.finish()


	@dp.message_handler(state=updateCase.name)
	async def input_coin_update(message: types.Message, state: FSMContext):
		filenames = next(os.walk(f'allcases/{message.from_user.id}/'), (None, None, []))[2]

		if f'{message.text}.txt' not in filenames:
			msg = '<b>–¢–∞–∫–æ–≥–æ id –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>There is no such id!</b>'

			await message.answer(msg)
			await state.finish()
		else:
			async with state.proxy() as data:
				data['name'] = message.text

			await updateCase.next()
			msg = '<b>–í–≤–µ–¥–∏—Ç–µ —Ç–∏–∫–µ—Ä:</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>Enter the ticker:</b>'

			await bot.send_message(message.from_user.id, msg)
			await updateCase.coin.set()


	@dp.message_handler(state=updateCase.coin)
	async def input_coin_update(message: types.Message, state: FSMContext):
		if len(message.text) < 3:
			msg = '<b>–ù–∞–∑–≤–∞–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –¥–ª–∏–Ω–Ω–µ–µ!</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>The name should be longer!</b>'

			await message.answer(msg)
			return

		async with state.proxy() as data:
			data['coin'] = message.text.upper()

		await updateCase.next()
		msg = '<b>–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –ø–æ–∫—É–ø–∫–∏:</b>'
		if getUserStat(message.from_user.id)[5] == 'en':
			msg = '<b>Enter the purchase price:</b>'

		await bot.send_message(message.from_user.id, msg)
		await updateCase.price.set()


	@dp.message_handler(state=updateCase.price)
	async def input_volume_update(message: types.Message, state: FSMContext):
		if message.text.isalpha():
			msg = '<b>–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>The price must be a number</b>!'

			await message.answer(msg)
			return
		else:
			async with state.proxy() as data:
				data['price'] = message.text

			await updateCase.next()
			msg = '<b>–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª-–≤–æ:</b>'
			if getUserStat(message.from_user.id)[5] == 'en':
				msg = '<b>Enter the quantity:</b>'

			await bot.send_message(message.from_user.id, msg)
			await updateCase.volume.set()


	@dp.message_handler(state=updateCase.volume)
	async def input_price_update(message: types.Message, state: FSMContext):
		async with state.proxy() as data:
			if message.text.isalpha():
				msg = '<b>–û–±—ä–µ–º –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = '<b>The volume must be a number</b>!'

				await message.answer(msg)
				return
			else:
				old_data = None

				with open(f'allcases/{message.from_user.id}/{getUserStat(message.from_user.id)[13]}.txt', 'r') as f:
					old_data = f.read()

				with open(f'allcases/{message.from_user.id}/{getUserStat(message.from_user.id)[13]}.txt', 'w') as f:
					f.write(f'{old_data}\n{data["coin"]} {data["price"]} {message.text}')

				msg = f'<b>–í–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å (id: {data["name"]}) —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f'<b>Your portfolio (id: {data["name"]}) has been successfully updated!</b>'

				await bot.send_message(message.from_user.id, msg)
				await state.finish()


	@dp.message_handler(commands=['about', 'test'])
	async def about_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			try:
				await dp.throttle(message.text, rate=time_for_spam_ban)
			except Throttled:
				msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

				await message.reply(msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				await bot.send_message(message.from_user.id, f'–í–µ—Ä—Å–∏—è –ë–æ—Ç–∞: {bot_version}')


	@dp.callback_query_handler(lambda c: c.data == 'u1m')
	async def u1m_cmd(callback_query: types.CallbackQuery):
		if not(int(getUserStat(callback_query.from_user.id)[9])):
			updateLogicTF(callback_query.from_user.id, 'u1m', 1)

			await bot.answer_callback_query(callback_query.id)
			msg = '<b>–í–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 –º–∏–Ω—É—Ç–∞!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Mailing is enabled at 1 minute intervals!</b>'

			await bot.send_message(callback_query.from_user.id, msg)
		else:
			updateLogicTF(callback_query.from_user.id, 'u1m', 0)

			await bot.answer_callback_query(callback_query.id)
			msg = '<b>–†–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1 –º–∏–Ω—É—Ç–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Mailing is disabled at 1 minute intervals!</b>'

			await bot.send_message(callback_query.from_user.id, msg)


	@dp.callback_query_handler(lambda c: c.data == 'u5m')
	async def u5m_cmd(callback_query: types.CallbackQuery):
		if not(int(getUserStat(callback_query.from_user.id)[10])):
			updateLogicTF(callback_query.from_user.id, 'u5m', 1)

			await bot.answer_callback_query(callback_query.id)
			msg = '<b>–í–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 –º–∏–Ω—É—Ç!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Mailing is enabled at 5 minutes intervals!</b>'

			await bot.send_message(callback_query.from_user.id, msg)
		else:
			updateLogicTF(callback_query.from_user.id, 'u5m', 0)

			await bot.answer_callback_query(callback_query.id)
			msg = '<b>–†–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 5 –º–∏–Ω—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Mailing is disabled at 5 minutes intervals!</b>'

			await bot.send_message(callback_query.from_user.id, msg)


	@dp.callback_query_handler(lambda c: c.data == 'u15m')
	async def u15m_cmd(callback_query: types.CallbackQuery):
		if not(int(getUserStat(callback_query.from_user.id)[11])):
			updateLogicTF(callback_query.from_user.id, 'u15m', 1)

			await bot.answer_callback_query(callback_query.id)
			msg = '<b>–í–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 15 –º–∏–Ω—É—Ç!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Mailing is enabled at 15 minutes intervals!</b>'

			await bot.send_message(callback_query.from_user.id, msg)
		else:
			updateLogicTF(callback_query.from_user.id, 'u15m', 0)

			await bot.answer_callback_query(callback_query.id)
			msg = '<b>–†–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 15 –º–∏–Ω—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Mailing is disabled at 15 minutes intervals!</b>'

			await bot.send_message(callback_query.from_user.id, msg)


	@dp.callback_query_handler(lambda c: c.data == 'u30m')
	async def u30m_cmd(callback_query: types.CallbackQuery):
		if not(int(getUserStat(callback_query.from_user.id)[12])):
			updateLogicTF(callback_query.from_user.id, 'u30m', 1)

			await bot.answer_callback_query(callback_query.id)
			msg = '<b>–í–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Mailing is enabled at 30 minutes intervals!</b>'

			await bot.send_message(callback_query.from_user.id, msg)
		else:
			updateLogicTF(callback_query.from_user.id, 'u30m', 0)

			await bot.answer_callback_query(callback_query.id)
			msg = '<b>–†–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 30 –º–∏–Ω—É—Ç –æ—Ç–∫–ª—é—á–µ–Ω–∞!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Mailing is disabled at 30 minutes intervals!</b>'

			await bot.send_message(callback_query.from_user.id, msg)


	@dp.callback_query_handler(lambda c: c.data == 'uallm')
	async def uallm_cmd(callback_query: types.CallbackQuery):
		updateLogicTF(callback_query.from_user.id, 'u1m', 1)
		updateLogicTF(callback_query.from_user.id, 'u5m', 1)
		updateLogicTF(callback_query.from_user.id, 'u15m', 1)
		updateLogicTF(callback_query.from_user.id, 'u30m', 1)

		await bot.answer_callback_query(callback_query.id)
		msg = '<b>–í–∫–ª—é—á–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º 1, 5, 15, 30 –º–∏–Ω—É—Ç!</b>'
		if getUserStat(callback_query.from_user.id)[5] == 'en':
			msg = '<b>The newsletter is included in the interval of 1, 5, 15, 30 minutes!</b>'

		await bot.send_message(callback_query.from_user.id, msg)


	@dp.callback_query_handler(lambda c: c.data == 'uoffsm')
	async def uoffsm_cmd(callback_query: types.CallbackQuery):
		updateLogicTF(callback_query.from_user.id, 'u1m', 0)
		updateLogicTF(callback_query.from_user.id, 'u5m', 0)
		updateLogicTF(callback_query.from_user.id, 'u15m', 0)
		updateLogicTF(callback_query.from_user.id, 'u30m', 0)

		await bot.answer_callback_query(callback_query.id)
		msg = '<b>–í—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã!</b>'
		if getUserStat(callback_query.from_user.id)[5] == 'en':
			msg = '<b>All mailings are disabled!</b>'

		await bot.send_message(callback_query.from_user.id, msg)


	@dp.callback_query_handler(lambda c: c.data == 'logic_on')
	async def logic_om_cmd_data(callback_query: types.CallbackQuery):
		if int(getUserStat(callback_query.from_user.id)[3]) != 1:
			updateUser(callback_query.from_user.id, 1)

			os.system(f'start python logic.py {callback_query.from_user.id}')

			msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø—É—â–µ–Ω!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Algorithm has been started!</b>'

			await bot.send_message(callback_query.from_user.id, msg)
		else:
			msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Algorithm is already running!</b>'

			await bot.send_message(callback_query.from_user.id, msg)


	@dp.callback_query_handler(lambda c: c.data == 'logic_off')
	async def logic_off_cmd_data(callback_query: types.CallbackQuery):
		if int(getUserStat(callback_query.from_user.id)[3]) != 0:
			updateUser(callback_query.from_user.id, 0)

			msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–∫–ª—é—á–µ–Ω!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Algorithm has been disabled!</b>'

			await bot.send_message(callback_query.from_user.id, msg)
		else:
			msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!</b>'
			if getUserStat(callback_query.from_user.id)[5] == 'en':
				msg = '<b>Algorithm is already disabled!</b>'

			await bot.send_message(callback_query.from_user.id, msg)


	@dp.callback_query_handler(lambda c: c.data == 'upersm')
	async def upersm_cmd(callback_query: types.CallbackQuery):
		msg = '<b>–ö–∞–∫ —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –∞–ª–≥–æ—Ä–∏—Ç–º? –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è:</b>\n\n<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏:</b>\n<code>/time</code> <i>—á–∞—Å</i>  <b>- –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n<code>/percent</code> <i>–ø—Ä–æ—Ü–µ–Ω—Ç</i>  <b>- –ø–æ—Ä–æ–≥ –ø—Ä–æ–≤–µ—Ä–∫–∏</b>\n\n<b>–ó–∞–ø—É—Å–∫:</b>\n<code>/logic_on</code>  <b>- –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º</b>\n<code>/logic_off</code>  <b>- –≤—ã–∫–ª—é—á–∏—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º</b>\n\n–ü–∏—Å–∞—Ç—å –≤—Å–µ —á–∏—Å–ª–∞–º–∏, –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å –∑–Ω–∞–∫–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞ –∏ –ø—Ä–æ—á–µ–µ!\n–í <code>/time</code> —É–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç—Ä–æ–≥–æ –≤—Ä–µ–º—è –≤ —á–∞—Å–∞—Ö\n–ï—Å–ª–∏ —á–∏—Å–ª–æ –¥—Ä–æ–±–Ω–æ–µ, —Ç–æ –ø–∏—Å–∞—Ç—å —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É!'
		if getUserStat(callback_query.from_user.id)[5] == 'en':
			msg = '<b>How to create your own algorithm? Instruction manual:</b>\n\n<b>Settings:</b>\n<code>/time</code> <i>hour</i>  <b>- interval for check</b>\n<code>/percent</code> <i>percent</i>  <b>- trigger for check</b>\n\n<b>Start:</b>\n<code>/logic_on</code>  <b>- Enable</b>\n<code>/logic_off</code>  <b>- Disable</b>\n\nWrite everything in numbers, do not specify percent signs and so on!\nOn <code>/time</code> specify strictly the time in hours\nIf the number is fractional, then write through a dot!'
			key1 = types.InlineKeyboardButton('Enable', callback_data='logic_on')
			key2 = types.InlineKeyboardButton('Disable', callback_data='logic_off')
		else:
			key1 = types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å', callback_data='logic_on')
			key2 = types.InlineKeyboardButton('–í—ã–∫–ª—é—á–∏—Ç—å', callback_data='logic_off')
		keyboard = types.InlineKeyboardMarkup().add(key1, key2)

		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, msg, reply_markup=keyboard)


	@dp.callback_query_handler(lambda c: c.data == 'langru')
	async def langru_cmd(callback_query: types.CallbackQuery):
		msg = '<b>–í—ã –ø–æ–º–µ–Ω—è–ª–∏ —è–∑—ã–∫ –Ω–∞ —Ä—É—Å—Å–∫–∏–π!</b>'
		updateUlang(callback_query.from_user.id, 'ru')

		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, msg, reply_markup=getKeyboard(callback_query, 'main'))


	@dp.callback_query_handler(lambda c: c.data == 'langen')
	async def langru_cmd(callback_query: types.CallbackQuery):
		msg = '<b>You have changed the language to English!</b>'
		updateUlang(callback_query.from_user.id, 'en')

		await bot.answer_callback_query(callback_query.id)
		await bot.send_message(callback_query.from_user.id, msg, reply_markup=getKeyboard(callback_query, 'main'))


	@dp.message_handler(commands=['help', 'instruction', 'info', '–ø–æ–º–æ—â—å', '—Ö–µ–ª–ø', '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è'])
	async def instruction_cmd(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			try:
				await dp.throttle(message.text, rate=time_for_spam_ban)
			except Throttled:
				msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
				if getUserStat(message.from_user.id)[5] == 'en':
					msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

				await message.reply(msg)
				await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
			else:
				msg = '<b>–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è–º\n–í—ã–±–µ—Ä–∏—Ç–µ –≥–æ—Ç–æ–≤—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª, –ª–∏–±–æ —Å–æ–∑–¥–∞–π—Ç–µ —Å–≤–æ–π:</b>\n\n<i>–ü–æ–ª–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è -></i> @crypto_bot_help'

				if getUserStat(message.from_user.id)[5] == 'en':
					key = types.InlineKeyboardButton('1 minute', callback_data='u1m')
					key2 = types.InlineKeyboardButton('5 minutes', callback_data='u5m')
					key3 = types.InlineKeyboardButton('15 minutes', callback_data='u15m')
					key4 = types.InlineKeyboardButton('30 minutes', callback_data='u30m')
					key5 = types.InlineKeyboardButton('Enable all', callback_data='uallm')
					key6 = types.InlineKeyboardButton('Create own', callback_data='upersm')
					key7 = types.InlineKeyboardButton('Disable all', callback_data='uoffsm')
					msg = '<b>You can enable/disable sending notifications on deviations\nChoose a ready-made interval, or create your own:</b>\n\n<i>Full instruction -></i> @crypto_bot_help'
				else:
					key = types.InlineKeyboardButton('1 –º–∏–Ω—É—Ç–∞', callback_data='u1m')
					key2 = types.InlineKeyboardButton('5 –º–∏–Ω—É—Ç', callback_data='u5m')
					key3 = types.InlineKeyboardButton('15 –º–∏–Ω—É—Ç', callback_data='u15m')
					key4 = types.InlineKeyboardButton('30 –º–∏–Ω—É—Ç', callback_data='u30m')
					key5 = types.InlineKeyboardButton('–í–∫–ª—é—á–∏—Ç—å –≤—Å–µ', callback_data='uallm')
					key6 = types.InlineKeyboardButton('–°–æ–∑–¥–∞—Ç—å', callback_data='upersm')
					key7 = types.InlineKeyboardButton('–û—Ç–∫–ª—é—á–∏—Ç—å –≤—Å–µ', callback_data='uoffsm')

				keyboard = types.InlineKeyboardMarkup().add(key, key2, key3, key4, key5, key6, key7)

				await bot.send_message(message.from_user.id, msg, reply_markup=keyboard)
		else:
			await bot.send_message(message.from_user.id, '@crypto_bot_help')


	@dp.message_handler(commands=['start'])
	async def start_cmd(message: types.Message):
		if not(getUserStat(message.from_user.id) is not None):
			await bot.send_message(message.from_user.id, text= f'<b>Hi, {message.from_user.username}!</b>\nTo continue, you need to register!\n\nEnter the registration code:')
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=['registration', 'reg', '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', 'register', '—Ä–µ–≥'])
	async def register_cmd(message: types.Message):
		if not(getUserStat(message.from_user.id) is not None):
			await bot.send_message(message.from_user.id, '<b>Enter the registration code:</b>')
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler(commands=[getCode()])
	async def reg_code_cmd(message: types.Message):
		if not(getUserStat(message.from_user.id) is not None):
			abc, code = 'abcdewjsfkfep41657fapsdadwdbakjsf1865218sd', ''

			regUser(message.from_user.id, message.from_user.username)

			for i in range(7):
				code += abc[random.randint(0, len(abc)-1)]
			changeCode(code)

			await bot.send_message(message.from_user.id, '<b>Registration was successful!</b>\nUse the keyboard to make it more convenient!', reply_markup=getKeyboard(message, 'main'))
			await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è!</b>\n\n<i>Id: {message.from_user.id}</i>')
		else:
			await bot.send_message(message.from_user.id, access_denied)


	@dp.message_handler()
	async def echo(message: types.Message):
		if getUserStat(message.from_user.id) is not None:
			msg = message.text.lower()

			if msg == 'on' or msg == '–≤–∫–ª':
				try:
					await dp.throttle(message.text, rate=time_for_spam_ban)
				except Throttled:
					msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

					await message.reply(msg)
					await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					if int(getUserStat(message.from_user.id)[3]) != 1:
						updateUser(message.from_user.id, 1)

						os.system(f'start python logic.py {message.from_user.id}')

						msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º –∑–∞–ø—É—â–µ–Ω!</b>'
						if getUserStat(message.from_user.id)[5] == 'en':
							msg = '<b>Algorithm has been started!</b>'

						await bot.send_message(message.from_user.id, msg)
					else:
						msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º —É–∂–µ –∑–∞–ø—É—â–µ–Ω!</b>'
						if getUserStat(message.from_user.id)[5] == 'en':
							msg = '<b>The algorithm is already running!</b>'

						await bot.send_message(message.from_user.id, msg)

			if msg == 'off' or msg == '–≤—ã–∫–ª':
				try:
					await dp.throttle(message.text, rate=time_for_spam_ban)
				except Throttled:
					msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

					await message.reply(msg)
					await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					if int(getUserStat(message.from_user.id)[3]) != 0:
						updateUser(message.from_user.id, 0)
						os.system(f'start Taskkill /PID {int(getUserStat(message.from_user.id)[8])} /F')
						updateUpid(message.from_user.id, 0)

						msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º –æ—Ç–∫–ª—é—á–µ–Ω!</b>'
						if getUserStat(message.from_user.id)[5] == 'en':
							msg = '<b>Algorithm has been disabled!</b>'

						await bot.send_message(message.from_user.id, msg)
					else:
						msg = '<b>–ê–ª–≥–æ—Ä–∏—Ç–º —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω!</b>'
						if getUserStat(message.from_user.id)[5] == 'en':
							msg = '<b>The algorithm is already disabled!</b>'

						await bot.send_message(message.from_user.id, msg)

			if msg == '–∫–æ–π–Ω—ã' or msg == '–∫–æ–π–Ω' or msg == 'coins' or msg == 'coin' or msg == 'coinsüí∞' or msg == 'binance':
				try:
					await dp.throttle(message.text, rate=time_for_spam_ban)
				except Throttled:
					msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

					await message.reply(msg)
					await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					await getCoins(message, bot, 'binance')

			if msg == 'bybit_test':
				try:
					await dp.throttle(message.text, rate=time_for_spam_ban)
				except Throttled:
					msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

					await message.reply(msg)
					await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					await getCoins(message, bot, 'bybit')

			if msg == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏' or msg == 'options' or msg == 'settings' or msg == '–æ–ø—Ü–∏–∏' or msg == 'options‚öôÔ∏è':
				try:
					await dp.throttle(message.text, rate=time_for_spam_ban)
				except Throttled:
					msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

					await message.reply(msg)
					await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					await getOptions(message, bot)

			if msg == '–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã' or msg == 'tools':
				try:
					await dp.throttle(message.text, rate=time_for_spam_ban)
				except Throttled:
					msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

					await message.reply(msg)
					await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					msg = '<b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã!</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = '<b>You have moved to the tools section!</b>'

					await bot.send_message(message.from_user.id, msg, reply_markup=getKeyboard(message, 'tools'))

			if msg == '–∞–ª–≥–æ—Ä–∏—Ç–º' or msg == 'logic' or msg == 'algorithm':
				try:
					await dp.throttle(message.text, rate=time_for_spam_ban)
				except Throttled:
					msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

					await message.reply(msg)
					await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					msg = '<b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –∞–ª–≥–æ—Ä–∏—Ç–º!</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = '<b>You have moved to the algorithm section!</b>'

					await bot.send_message(message.from_user.id, msg, reply_markup=getKeyboard(message, 'logic'))

			if msg == '—Å–∫–∞–º' or msg == 'scam':
				await getScam(message, bot, dp)

			if msg == '–ø–æ—Ä—Ç—Ñ–µ–ª—å' or msg == 'case' or msg == 'portfolio':
				await getCase(message, bot, dp)

			if msg == '–º–µ–Ω—é' or msg == 'menu' or msg == '/–º–µ–Ω—é' or msg == '/menu':
				try:
					await dp.throttle(message.text, rate=time_for_spam_ban)
				except Throttled:
					msg = f'<b>–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_for_spam_ban} —Å–µ–∫—É–Ω–¥—ã. –ù–µ–ª—å–∑—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = f"<b>Wait {time_for_spam_ban} seconds. You can't use this command often.</b>"

					await message.reply(msg)
					await bot.send_message(logs_chat_id, f'<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.username} —Å–ø–∞–º–∏—Ç!\n\n{message.text}</b>\n\n<i>Id: {message.from_user.id}</i>')
				else:
					msg = '<b>–í—ã –ø–µ—Ä–µ—à–ª–∏ –≤ —Ä–∞–∑–¥–µ–ª –º–µ–Ω—é!</b>'
					if getUserStat(message.from_user.id)[5] == 'en':
						msg = '<b>You have moved to the menu section!</b>'

					await bot.send_message(message.from_user.id, msg, reply_markup=getKeyboard(message, 'main'))

			if msg == '–ø—Ä–æ—Ñ–∏–ª—å' or msg == 'profile':
				await getProfile(message, bot)

			if msg == '–≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å' or msg == 'volatility':
				await getVol(message, bot, dp)

			if msg == 'faq':
				await bot.send_message(message.from_user.id, 'This feature is still in development.', reply_markup=getKeyboard(message, 'main'))
		else:
			await bot.send_message(message.from_user.id, access_denied)



	executor.start_polling(dp, skip_updates=True)




while True:
	try:
		print(f'Bot has been started! {str(datetime.datetime.now())[:-10]}\n\n')
		bot_start()
	except:
		print(f'Bot has been restarted! {str(datetime.datetime.now())[:-10]}\n\n')
		bot_start()
